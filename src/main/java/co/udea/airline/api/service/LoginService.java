package co.udea.airline.api.service;

import java.util.Optional;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken;
import org.springframework.stereotype.Service;

import co.udea.airline.api.model.jpa.model.security.Person;
import co.udea.airline.api.model.jpa.repository.security.PersonRepository;
import co.udea.airline.api.utils.common.JwtUtils;

@Service
public class LoginService {

    final PersonRepository personRepository;

    final AuthenticationManager authenticationManager;

    final JwtUtils jwtUtils;

    final RegisterService authenticationService;

    public LoginService(PersonRepository personRepository, AuthenticationManager authenticationManager,
            JwtUtils jwtUtils, RegisterService authenticationService) {
        this.personRepository = personRepository;
        this.authenticationManager = authenticationManager;
        this.jwtUtils = jwtUtils;
        this.authenticationService = authenticationService;
    }

    /**
     * Authenticates a user through a {@link UsernamePasswordAuthenticationToken}
     * checking if the user exists in the database and if the password is correct
     * 
     * @param email    User's email
     * @param password User's raw password
     * @return A {@link Jwt} containing the info about the authenticated user
     * @throws UsernameNotFoundException if the user with the specified email
     *                                   doesn't exist
     * @throws AuthenticationException   if there was an internal error
     */
    public Jwt authenticateUser(String email, String password) throws AuthenticationException {

        Authentication auth = new UsernamePasswordAuthenticationToken(email, password);
        auth = authenticationManager.authenticate(auth);

        if (auth.isAuthenticated()) {
            Optional<Person> p = personRepository.findByEmail(auth.getName());
            if (!p.isPresent())
                throw new UsernameNotFoundException("User hasn't registerred yet");
            return jwtUtils.createToken(p.get());
        }
        throw new AuthenticationServiceException(
                "cannot authenticate user %s".formatted(auth.getName()));
    }

    /**
     * Authenticates an idToken generated by google, then searches for the user's
     * email that is present in the idToken to authenticate him, and if not present,
     * registers the user
     * 
     * @param idToken the idToken generated by google
     * @return A JWT containing info about the current authenticated user
     */
    public Jwt authenticateIdToken(String idToken) {

        // tries to authenticate the token using the googleJwtDecoder Bean internally
        Authentication auth = authenticationManager.authenticate(new BearerTokenAuthenticationToken(idToken));

        if (auth.isAuthenticated()) {

            // gets the decoded token
            Jwt token = (Jwt) auth.getPrincipal();

            Optional<Person> p = personRepository.findByEmail(token.getClaimAsString("email"));
            
            if (!p.isPresent()) {
                return authenticationService.externalRegister(token, "Google");
            }

            return jwtUtils.createToken(p.get());
        }
        throw new AuthenticationServiceException(
                "cannot authenticate user %s".formatted(auth.getName()));
    }

}
