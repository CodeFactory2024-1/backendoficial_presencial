package co.udea.airline.api.service;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import net.bytebuddy.utility.RandomString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.stereotype.Service;

import co.udea.airline.api.model.dto.RegisterRequestDTO;
import co.udea.airline.api.model.jpa.model.Person;
import co.udea.airline.api.model.jpa.repository.IdentificationTypeRepository;
import co.udea.airline.api.model.jpa.repository.PersonRepository;
import co.udea.airline.api.model.jpa.repository.PositionRepository;
import co.udea.airline.api.utils.common.JwtUtils;
import co.udea.airline.api.utils.exception.RegisterException;

import java.io.UnsupportedEncodingException;

@Service
public class RegisterService {

    @Autowired
    private PersonRepository personRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtils jwtUtils;

    @Autowired
    private IdentificationTypeRepository idRepository;

    @Autowired
    private PositionRepository positionRepository;
    @Autowired
    private JavaMailSender mailSender;


    public boolean verify(String verificationCode) {
        Person user = personRepository.findByVerificationCode(verificationCode);

        if (user == null || user.isEnabled()) {
            return false;
        } else {
            user.setVerificationCode(null);
            user.setVerified(true);
            personRepository.save(user);

            return true;
        }

}
    private void sendVerificationEmail(Person user, String siteURL)
            throws MessagingException, UnsupportedEncodingException {
        String toAddress = user.getEmail();
        String fromAddress = "andresdario.2001@gmail.com";
        String senderName = "Sitas airline";
        String subject = "Please verify your registration";
        String content = "Dear [[name]],<br>"
                + "Please click the link below to verify your registration:<br>"
                + "<h3><a href=\"[[URL]]\" target=\"_self\">VERIFY</a></h3>"
                + "Thank you,<br>"
                + "Sitas.";

        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message);

        helper.setFrom(fromAddress, senderName);
        helper.setTo(toAddress);
        helper.setSubject(subject);
        String fullName=user.getFirstName() + " " + user.getLastName();

        content = content.replace("[[name]]", (fullName));

        String verifyURL = siteURL + "/verify?code=" + user.getVerificationCode();

        content = content.replace("[[URL]]", verifyURL);

        helper.setText(content, true);

        mailSender.send(message);

    }

    /**
     * Creates a new person in the database using the idToken
     * 
     * @param idToken     The token generated by the external login service
     * @param loginSource The external login source that provided the idToken
     * @throws UnsupportedOperationException if login source is not 'Google' (as for
     *                                       now)
     * @return A {@link Jwt} containing user's roles and permissions
     */
    public Jwt externalRegister(Jwt idToken, String loginSource) throws UnsupportedOperationException {

        if (!loginSource.equalsIgnoreCase("google")) {
            throw new UnsupportedOperationException("login source %s is not supported yet".formatted(loginSource));
        }
        Person user = new Person();
        user.setEmail(idToken.getClaimAsString("email"));
        user.setFirstName(idToken.getClaimAsString("given_name"));
        user.setLastName(idToken.getClaimAsString("family_name"));
        user.setExternalLoginSource(loginSource);
        user.setPositions(positionRepository.findByName("USER"));
        user.setVerified(true);
        user.setFailedLoginAttempts(0);
        user.setEnabled(true);
        personRepository.save(user);
        return jwtUtils.createToken(user);
    }

    /**
     * Creates a new person in the database using the provided
     * {@link RegisterRequestDTO}
     * 
     * @param request The info to register the user
     * @return A {@link Jwt} on success
     * @throws RegisterException if the user is already registered
     */
    public String register(RegisterRequestDTO request,String siteURL) throws RegisterException, MessagingException, UnsupportedEncodingException {

        // check if user already exist. if exist than authenticate the user
        if (personRepository.findByEmail(request.getEmail()).isPresent()) {
            throw new RegisterException("User already exist");
        }

        Person user = new Person();
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setIdentificationNumber(request.getIdNumber());
        user.setIdentificationType(idRepository.findByIdentificationTypeName(request.getIdType()));
        user.setCity(request.getCity());
        user.setCountry(request.getCountry());
        user.setPhoneNumber(request.getPhoneNumber());
        user.setGenre(request.getGenre());
        user.setPositions(positionRepository.findByName("USER"));
        user.setVerified(false);
        user.setFailedLoginAttempts(0);
        String randomCode = RandomString.make(64);
        user.setVerificationCode(randomCode);
        user.setEnabled(true);
        user = personRepository.save(user);
        sendVerificationEmail(user, siteURL);
        return ("User registration was successful");
    }

}