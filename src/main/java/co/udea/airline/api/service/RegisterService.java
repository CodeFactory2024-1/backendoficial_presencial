package co.udea.airline.api.service;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.stereotype.Service;

import co.udea.airline.api.dto.RegisterRequestDTO;
import co.udea.airline.api.model.jpa.model.Person;
import co.udea.airline.api.model.jpa.repository.IdentificationTypeRepository;
import co.udea.airline.api.model.jpa.repository.PersonRepository;
import co.udea.airline.api.model.jpa.repository.PositionRepository;
import co.udea.airline.api.utils.common.JwtUtils;
import co.udea.airline.api.utils.exception.RegisterException;

@Service
public class RegisterService {

    private final PersonRepository repository;

    private final PasswordEncoder passwordEncoder;

    private final JwtUtils jwtUtils;

    private final IdentificationTypeRepository idRepository;

    private final PositionRepository positionRepository;

    public RegisterService(PersonRepository repository, PasswordEncoder passwordEncoder, JwtUtils jwtUtils,
            IdentificationTypeRepository idRepository, PositionRepository positionRepository) {
        this.repository = repository;
        this.passwordEncoder = passwordEncoder;
        this.jwtUtils = jwtUtils;
        this.idRepository = idRepository;
        this.positionRepository = positionRepository;
    }

    /**
     * Creates a new person in the database using the idToken
     * 
     * @param idToken     The token generated by the external login service
     * @param loginSource The external login source that provided the idToken
     * @throws UnsupportedOperationException if login source is not 'Google' (as for
     *                                       now)
     * @return A {@link Jwt} containing user's roles and permissions
     */
    public Jwt externalRegister(Jwt idToken, String loginSource) throws UnsupportedOperationException {

        if (!loginSource.equalsIgnoreCase("google")) {
            throw new UnsupportedOperationException("login source %s is not supported yet".formatted(loginSource));
        }
        Person user = new Person();
        user.setEmail(idToken.getClaimAsString("email"));
        user.setFirstName(idToken.getClaimAsString("given_name"));
        user.setLastName(idToken.getClaimAsString("family_name"));
        user.setExternalLoginSource(loginSource);
        user.setPositions(positionRepository.findByName("USER"));
        user.setVerified(false);
        user.setFailedLoginAttempts(0);
        user.setEnabled(true);
        repository.save(user);
        return jwtUtils.createToken(user);
    }

    /**
     * Creates a new person in the database using the provided
     * {@link RegisterRequestDTO}
     * 
     * @param request The info to register the user
     * @return A {@link Jwt} on success
     * @throws RegisterException if the user is already registered
     */
    public Jwt register(RegisterRequestDTO request) throws RegisterException {

        // check if user already exist. if exist than authenticate the user
        if (repository.findByEmail(request.getEmail()).isPresent()) {
            throw new RegisterException("User already exist");
        }

        Person user = new Person();
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setIdentificationNumber(request.getIdNumber());
        user.setIdentificationType(idRepository.findByIdentificationTypeName(request.getIdType()));
        user.setCity(request.getCity());
        user.setCountry(request.getCountry());
        user.setPhoneNumber(request.getPhoneNumber());
        user.setGenre(request.getGenre());
        user.setPositions(positionRepository.findByName("USER"));
        user.setVerified(false);
        user.setFailedLoginAttempts(0);
        user.setEnabled(true);
        user = repository.save(user);

        return jwtUtils.createToken(user);
    }

}