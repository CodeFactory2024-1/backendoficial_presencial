package co.udea.airline.api.utils.config;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;

import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;

@Configuration
public class JWTConfig {

    /**
     * A {@link JwtEncoder} to encode and sign JWT's generated by this server using
     * a {@link KeyPair}.
     */
    @Bean
    JwtEncoder jwtEncoder(KeyPair keyPair) {
        JWK jwk = new RSAKey.Builder((RSAPublicKey) keyPair.getPublic())
                .privateKey((RSAPrivateKey) keyPair.getPrivate())
                .build();

        JWKSource<SecurityContext> jwks = new ImmutableJWKSet<>(new JWKSet(jwk));
        return new NimbusJwtEncoder(jwks);
    }

    /**
     * A {@link JwtDecoder} to decode and verify JWT's generated by this server
     * using a {@link KeyPair}.
     */
    @Bean
    JwtDecoder jwtDecoder(KeyPair keyPair) {
        return NimbusJwtDecoder
                .withPublicKey((RSAPublicKey) keyPair.getPublic())
                .build();
    }

    /**
     * A {@link JwtDecoder} to decode and verify ID Tokens generated by google.
     */
    @Bean
    JwtDecoder googleJwtDecoder() {
        return NimbusJwtDecoder
                .withIssuerLocation("https://accounts.google.com")
                .build();
    }

    /**
     * A {@link KeyPair} that contains both public and private RSA keys to sign and
     * verify JWT's generated by this server.
     * 
     * @throws NoSuchAlgorithmException
     * 
     * @throws IOException
     * @throws InvalidKeySpecException
     */
    @Bean()
    KeyPair keyPair(@Value("${airline-api.jwt.use-random-rsa-key:true}") Boolean useRandomRsaKey,
            @Value("${airline-api.jwt.rsa-key:}") String privateKeyFile,
            @Value("${airline-api.jwt.rsa-pub-key:}") String publicKeyFile)
            throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
                
        if (useRandomRsaKey) {
            KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
            generator.initialize(2048);

            return generator.genKeyPair();

        }

        KeyFactory kf = KeyFactory.getInstance("RSA");

        byte[] keyBytes = Files.readAllBytes(Paths.get(privateKeyFile));
        byte[] keyBytesPub = Files.readAllBytes(Paths.get(publicKeyFile));

        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
        X509EncodedKeySpec specPub = new X509EncodedKeySpec(keyBytesPub);

        PrivateKey privateKey = kf.generatePrivate(spec);
        PublicKey publicKey = kf.generatePublic(specPub);

        return new KeyPair(publicKey, privateKey);

    }

}
